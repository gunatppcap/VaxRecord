/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MaskedVaccineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeVerifier"
      | "auths"
      | "createRecord"
      | "getEncryptedRecord"
      | "isAuthorized"
      | "latestAuthIdByRecordAndVerifier"
      | "nextAuthId"
      | "nextProofId"
      | "nextRecordId"
      | "nextRequestId"
      | "protocolId"
      | "records"
      | "requestDecryption"
      | "revokeAuthorization"
      | "revokeRecord"
      | "storeDecryptionProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionRequested"
      | "DecryptionResultStored"
      | "RecordCreated"
      | "RecordRevoked"
      | "VerifierAuthorized"
      | "VerifierRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeVerifier",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "auths", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createRecord",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAuthIdByRecordAndVerifier",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAuthId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextProofId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRecordId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthorization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDecryptionProof",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAuthIdByRecordAndVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextAuthId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextProofId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRecordId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDecryptionProof",
    data: BytesLike
  ): Result;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    recordId: BigNumberish,
    verifier: AddressLike,
    scopeCipherHandle: BytesLike
  ];
  export type OutputTuple = [
    requestId: bigint,
    recordId: bigint,
    verifier: string,
    scopeCipherHandle: string
  ];
  export interface OutputObject {
    requestId: bigint;
    recordId: bigint;
    verifier: string;
    scopeCipherHandle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionResultStoredEvent {
  export type InputTuple = [
    proofId: BigNumberish,
    recordId: BigNumberish,
    verifier: AddressLike,
    proofHash: BytesLike,
    proofMeta: BytesLike
  ];
  export type OutputTuple = [
    proofId: bigint,
    recordId: bigint,
    verifier: string,
    proofHash: string,
    proofMeta: string
  ];
  export interface OutputObject {
    proofId: bigint;
    recordId: bigint;
    verifier: string;
    proofHash: string;
    proofMeta: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordCreatedEvent {
  export type InputTuple = [
    recordId: BigNumberish,
    patient: AddressLike,
    providerHash: BytesLike
  ];
  export type OutputTuple = [
    recordId: bigint,
    patient: string,
    providerHash: string
  ];
  export interface OutputObject {
    recordId: bigint;
    patient: string;
    providerHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordRevokedEvent {
  export type InputTuple = [recordId: BigNumberish, patient: AddressLike];
  export type OutputTuple = [recordId: bigint, patient: string];
  export interface OutputObject {
    recordId: bigint;
    patient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAuthorizedEvent {
  export type InputTuple = [
    authId: BigNumberish,
    recordId: BigNumberish,
    verifier: AddressLike,
    expiry: BigNumberish,
    scopeCipherHandle: BytesLike
  ];
  export type OutputTuple = [
    authId: bigint,
    recordId: bigint,
    verifier: string,
    expiry: bigint,
    scopeCipherHandle: string
  ];
  export interface OutputObject {
    authId: bigint;
    recordId: bigint;
    verifier: string;
    expiry: bigint;
    scopeCipherHandle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRevokedEvent {
  export type InputTuple = [
    authId: BigNumberish,
    recordId: BigNumberish,
    verifier: AddressLike
  ];
  export type OutputTuple = [
    authId: bigint,
    recordId: bigint,
    verifier: string
  ];
  export interface OutputObject {
    authId: bigint;
    recordId: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MaskedVaccine extends BaseContract {
  connect(runner?: ContractRunner | null): MaskedVaccine;
  waitForDeployment(): Promise<this>;

  interface: MaskedVaccineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeVerifier: TypedContractMethod<
    [
      recordId: BigNumberish,
      verifier: AddressLike,
      scopeExt: BytesLike,
      inputProof: BytesLike,
      expiry: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  auths: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        recordId: bigint;
        verifier: string;
        scope: string;
        expiry: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  createRecord: TypedContractMethod<
    [
      encryptedPointerExt: BytesLike,
      inputProof: BytesLike,
      providerHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEncryptedRecord: TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        patient: string;
        encryptedPointerHandle: string;
        providerHash: string;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  isAuthorized: TypedContractMethod<
    [recordId: BigNumberish, verifier: AddressLike],
    [boolean],
    "view"
  >;

  latestAuthIdByRecordAndVerifier: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  nextAuthId: TypedContractMethod<[], [bigint], "view">;

  nextProofId: TypedContractMethod<[], [bigint], "view">;

  nextRecordId: TypedContractMethod<[], [bigint], "view">;

  nextRequestId: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  records: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        patient: string;
        encryptedPointer: string;
        providerHash: string;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  requestDecryption: TypedContractMethod<
    [recordId: BigNumberish, scopeExt: BytesLike, inputProof: BytesLike],
    [bigint],
    "nonpayable"
  >;

  revokeAuthorization: TypedContractMethod<
    [authId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRecord: TypedContractMethod<
    [recordId: BigNumberish],
    [void],
    "nonpayable"
  >;

  storeDecryptionProof: TypedContractMethod<
    [
      recordId: BigNumberish,
      verifier: AddressLike,
      proofHash: BytesLike,
      proofMeta: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeVerifier"
  ): TypedContractMethod<
    [
      recordId: BigNumberish,
      verifier: AddressLike,
      scopeExt: BytesLike,
      inputProof: BytesLike,
      expiry: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "auths"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        recordId: bigint;
        verifier: string;
        scope: string;
        expiry: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createRecord"
  ): TypedContractMethod<
    [
      encryptedPointerExt: BytesLike,
      inputProof: BytesLike,
      providerHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedRecord"
  ): TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        patient: string;
        encryptedPointerHandle: string;
        providerHash: string;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<
    [recordId: BigNumberish, verifier: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestAuthIdByRecordAndVerifier"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextAuthId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextProofId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextRecordId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "records"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        patient: string;
        encryptedPointer: string;
        providerHash: string;
        createdAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestDecryption"
  ): TypedContractMethod<
    [recordId: BigNumberish, scopeExt: BytesLike, inputProof: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAuthorization"
  ): TypedContractMethod<[authId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRecord"
  ): TypedContractMethod<[recordId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storeDecryptionProof"
  ): TypedContractMethod<
    [
      recordId: BigNumberish,
      verifier: AddressLike,
      proofHash: BytesLike,
      proofMeta: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionResultStored"
  ): TypedContractEvent<
    DecryptionResultStoredEvent.InputTuple,
    DecryptionResultStoredEvent.OutputTuple,
    DecryptionResultStoredEvent.OutputObject
  >;
  getEvent(
    key: "RecordCreated"
  ): TypedContractEvent<
    RecordCreatedEvent.InputTuple,
    RecordCreatedEvent.OutputTuple,
    RecordCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RecordRevoked"
  ): TypedContractEvent<
    RecordRevokedEvent.InputTuple,
    RecordRevokedEvent.OutputTuple,
    RecordRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAuthorized"
  ): TypedContractEvent<
    VerifierAuthorizedEvent.InputTuple,
    VerifierAuthorizedEvent.OutputTuple,
    VerifierAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRevoked"
  ): TypedContractEvent<
    VerifierRevokedEvent.InputTuple,
    VerifierRevokedEvent.OutputTuple,
    VerifierRevokedEvent.OutputObject
  >;

  filters: {
    "DecryptionRequested(uint256,uint256,address,bytes)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "DecryptionResultStored(uint256,uint256,address,bytes32,bytes)": TypedContractEvent<
      DecryptionResultStoredEvent.InputTuple,
      DecryptionResultStoredEvent.OutputTuple,
      DecryptionResultStoredEvent.OutputObject
    >;
    DecryptionResultStored: TypedContractEvent<
      DecryptionResultStoredEvent.InputTuple,
      DecryptionResultStoredEvent.OutputTuple,
      DecryptionResultStoredEvent.OutputObject
    >;

    "RecordCreated(uint256,address,bytes32)": TypedContractEvent<
      RecordCreatedEvent.InputTuple,
      RecordCreatedEvent.OutputTuple,
      RecordCreatedEvent.OutputObject
    >;
    RecordCreated: TypedContractEvent<
      RecordCreatedEvent.InputTuple,
      RecordCreatedEvent.OutputTuple,
      RecordCreatedEvent.OutputObject
    >;

    "RecordRevoked(uint256,address)": TypedContractEvent<
      RecordRevokedEvent.InputTuple,
      RecordRevokedEvent.OutputTuple,
      RecordRevokedEvent.OutputObject
    >;
    RecordRevoked: TypedContractEvent<
      RecordRevokedEvent.InputTuple,
      RecordRevokedEvent.OutputTuple,
      RecordRevokedEvent.OutputObject
    >;

    "VerifierAuthorized(uint256,uint256,address,uint64,bytes)": TypedContractEvent<
      VerifierAuthorizedEvent.InputTuple,
      VerifierAuthorizedEvent.OutputTuple,
      VerifierAuthorizedEvent.OutputObject
    >;
    VerifierAuthorized: TypedContractEvent<
      VerifierAuthorizedEvent.InputTuple,
      VerifierAuthorizedEvent.OutputTuple,
      VerifierAuthorizedEvent.OutputObject
    >;

    "VerifierRevoked(uint256,uint256,address)": TypedContractEvent<
      VerifierRevokedEvent.InputTuple,
      VerifierRevokedEvent.OutputTuple,
      VerifierRevokedEvent.OutputObject
    >;
    VerifierRevoked: TypedContractEvent<
      VerifierRevokedEvent.InputTuple,
      VerifierRevokedEvent.OutputTuple,
      VerifierRevokedEvent.OutputObject
    >;
  };
}
